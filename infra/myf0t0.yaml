AWSTemplateFormatVersion: "2010-09-09"
Description: MyF0t0 environment setup
Parameters:
  OldPhotoBucketName:
    Type: String
    Description: Enter the Name of an existing S3 bucket that will house photos and thumbnails.  Leave blank to create a new bucket.
    Default: ""
  AdminEmail:
    Type: String
    Description: Email address of the administrator of the myf0t0 site.
    Default: michael.borchert@gmail.com
Conditions:
  NewBucket: !Equals [!Ref OldPhotoBucketName, ""]
Resources:
  ProcessingQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Join ["-", [!Ref AWS::StackName, "ProcessingQueue"]]
  ProcessingQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ProcessingQueue
      PolicyDocument:
        Statement:
          -
            Action:
              - "SQS:SendMessage"
            Effect: "Allow"
            Resource: !GetAtt ProcessingQueue.Arn
            Principal:
              AWS: "*"
  PhotoBucket:
    Type: AWS::S3::Bucket
    Condition: NewBucket
    DependsOn: ProcessingQueue
    Properties:
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - 'authorization'
            AllowedMethods:
              - GET
              - PUT
              - DELETE
            AllowedOrigins:
              - '*'
            MaxAge: '3000'
      NotificationConfiguration:
        QueueConfigurations:
          -
            Event: s3:ObjectCreated:*
            Queue: !GetAtt ProcessingQueue.Arn
            Filter:
              S3Key:
                Rules:
                  -
                    Name: "prefix"
                    Value: "img/"
          -
            Event: s3:ObjectRemoved:*
            Queue: !GetAtt ProcessingQueue.Arn
            Filter:
              S3Key:
                Rules:
                  -
                    Name: "prefix"
                    Value: "img/"
  PhotoBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: NewBucket
    DependsOn:
      - AdminRole
      - ViewerRole
      - LambdaRole
    Properties:
      Bucket: !Ref PhotoBucket
      PolicyDocument:
         Statement:
          - Action: 's3:*'
            Effect: Allow
            Resource:
            - !Sub 'arn:aws:s3:::${PhotoBucket}/*'
            Principal:
              AWS:
              - !GetAtt ViewerRole.Arn
              - !GetAtt AdminRole.Arn
              - !GetAtt LambdaRole.Arn
              - !GetAtt PhotographerUser.Arn
  PhotographerUser:
    Type: AWS::IAM::User
    Properties:
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:*
                Resource:
                  - !GetAtt PhotoBucket.Arn
  PhotographerAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName:
        !Ref PhotographerUser
  AppBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "No Comment"
  AppCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn:
      - OriginAccessIdentity
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
          Compress: True
          TargetOriginId: "website"
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: "index.html"
        Enabled: True
        Origins:
          - DomainName: !Sub "${AppBucket}.s3.${AWS::Region}.amazonaws.com"
            Id: "website"
            S3OriginConfig:
              OriginAccessIdentity: !Join ['', ['origin-access-identity/cloudfront/', !Ref OriginAccessIdentity]]
        PriceClass: PriceClass_100
  AppBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn:
      - AppBucket
    Properties:
      Bucket: !Ref AppBucket
      PolicyDocument:
        Statement:
          - Action: 's3:GetObject'
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:s3:::${AppBucket}/*'
            Principal:
              CanonicalUser: !GetAtt OriginAccessIdentity.S3CanonicalUserId
  MetadataDb:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "PK"
          AttributeType: "S"
        -
          AttributeName: "SK"
          AttributeType: "S"
        -
          AttributeName: "GSI1PK"
          AttributeType: "S"
        -
          AttributeName: "GSI1SK"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "PK"
          KeyType: "HASH"
        -
          AttributeName: "SK"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      GlobalSecondaryIndexes:
        -
          IndexName: "GSI1"
          KeySchema:
            -
              AttributeName: "GSI1PK"
              KeyType: "HASH"
            -
              AttributeName: "GSI1SK"
              KeyType: "RANGE"
          ProvisionedThroughput:
            ReadCapacityUnits: "5"
            WriteCapacityUnits: "5"
          Projection:
            ProjectionType: "ALL"
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Description: "Execution role for MyF0t0 Lambda functions."
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  LambdaExecutionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:*'
            Resource:
              - !GetAtt PhotoBucket.Arn
              - !Join ["", [!GetAtt PhotoBucket.Arn, "/*"]]
          - Effect: Allow
            Action:
              - 'dynamodb:*'
            Resource:
              - !GetAtt MetadataDb.Arn
              - !Join ["", [!GetAtt MetadataDb.Arn, "/index/*"]]
          - Effect: Allow
            Action:
              - 'sqs:ReceiveMessage'
              - 'sqs:DeleteMessage'
              - 'sqs:GetQueueAttributes'
            Resource: !GetAtt ProcessingQueue.Arn
      PolicyName: !Join ["-", [ !Ref AWS::StackName, "lambda-execution"] ]
      Roles:
        - !Ref LambdaRole
  ProcessingFunction:
    Type: AWS::Lambda::Function
    DependsOn: LambdaExecutionPolicy
    Properties:
      Code:
        S3Bucket: myf0t0dist
        S3Key: photo-processor.zip
      Description: Event-driven photo processor
      Environment:
        Variables:
          db_name: !Ref MetadataDb
          photo_bucket: !Ref PhotoBucket
      Handler: photo-processor.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Timeout: 30
  ProcessingFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeLambda
      FunctionName: !Ref ProcessingFunction
      Principal: sqs.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt ProcessingQueue.Arn
  ProcessingEventSource:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt ProcessingQueue.Arn
      FunctionName: !Ref ProcessingFunction
  ApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        -
          PolicyName: ApiGatewayLogsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                  - 'logs:PutLogEvents'
                  - 'logs:GetLogEvents'
                  - 'logs:FilterLogEvents'
                Resource: "*"
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                Resource: "*"
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayRole.Arn
  ApiFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: myf0t0dist
        S3Key: api.zip
      Description: MyF0t0 API backend
      Environment:
        Variables:
          db_name: !Ref MetadataDb
          photo_bucket: !Ref PhotoBucket
      Handler: app.app
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.6
  ApiFunctionPermission:
    Type: AWS::Lambda::Permission
    DependsOn: RestApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ApiFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*"
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "myf0t0"
      Description: "API Gateway for MyF0t0"
      EndpointConfiguration:
        Types:
          - REGIONAL
  ApiAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      IdentitySource: method.request.header.Authorization
      ProviderARNs:
        - !GetAtt UserPool.Arn
      RestApiId: !Ref RestApi
      Type: COGNITO_USER_POOLS
      Name: !Sub "myf0t0-${AWS::StackName}"
  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: LATEST
      Description: Latest Stage
      RestApiId:  !Ref RestApi
      DeploymentId: !Ref ApiDeployment
      MethodSettings:
        - ResourcePath: "/*"
          HttpMethod: "*"
          DataTraceEnabled: true
          LoggingLevel: INFO
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - PhotoGetRequest
      - PhotoPutRequest
      - RatingPutRequest
      - TagPutRequest
    Properties:
      RestApiId: !Ref RestApi
      StageName: DummyStage
  PhotoResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: "photo"
  PhotoGetRequest:
    Type: AWS::ApiGateway::Method
    DependsOn: ApiFunctionPermission
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref PhotoResource
      AuthorizationScopes:
        - profile
        - email
        - openid
        - aws.cognito.signin.user.admin
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiAuthorizer
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiFunction.Arn}/invocations
  PhotoPutRequest:
    Type: AWS::ApiGateway::Method
    DependsOn: ApiFunctionPermission
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref PhotoResource
      AuthorizationScopes:
        - profile
        - email
        - openid
        - aws.cognito.signin.user.admin
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiAuthorizer
      HttpMethod: PUT
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiFunction.Arn}/invocations
  PhotoOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: PhotoResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'PUT,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
  RatingResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: "rating"
  RatingPutRequest:
    Type: AWS::ApiGateway::Method
    DependsOn: ApiFunctionPermission
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref RatingResource
      AuthorizationScopes:
        - profile
        - email
        - openid
        - aws.cognito.signin.user.admin
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiAuthorizer
      HttpMethod: PUT
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiFunction.Arn}/invocations
  RatingOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: RatingResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'PUT,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
  TagResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: "tag"
  TagPutRequest:
    Type: AWS::ApiGateway::Method
    DependsOn: ApiFunctionPermission
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref TagResource
      AuthorizationScopes:
        - profile
        - email
        - openid
        - aws.cognito.signin.user.admin
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiAuthorizer
      HttpMethod: PUT
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiFunction.Arn}/invocations
  TagDeleteRequest:
    Type: AWS::ApiGateway::Method
    DependsOn: ApiFunctionPermission
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref TagResource
      AuthorizationScopes:
        - profile
        - email
        - openid
        - aws.cognito.signin.user.admin
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiAuthorizer
      HttpMethod: DELETE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiFunction.Arn}/invocations
  TagOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: TagResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'DELETE,PUT,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
  GalleryResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: "gallery"
  GalleryPutRequest:
    Type: AWS::ApiGateway::Method
    DependsOn: ApiFunctionPermission
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref GalleryResource
      AuthorizationScopes:
        - profile
        - email
        - openid
        - aws.cognito.signin.user.admin
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiAuthorizer
      HttpMethod: PUT
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiFunction.Arn}/invocations
  GalleryDeleteRequest:
    Type: AWS::ApiGateway::Method
    DependsOn: ApiFunctionPermission
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref GalleryResource
      AuthorizationScopes:
        - profile
        - email
        - openid
        - aws.cognito.signin.user.admin
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiAuthorizer
      HttpMethod: DELETE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiFunction.Arn}/invocations
  GalleryOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: GalleryResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,PUT,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
  GalleryParameterResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref GalleryResource
      PathPart: "{gallery_id}"
  GalleryParameterGetRequest:
    Type: AWS::ApiGateway::Method
    DependsOn: ApiFunctionPermission
    Properties:
      AuthorizationType: None
      RestApiId: !Ref RestApi
      ResourceId: !Ref GalleryParameterResource
      HttpMethod: GET
      RequestParameters:
        method.request.path.gallery: True
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        RequestParameters:
          integration.request.path.gallery: method.request.path.gallery
        Uri: !Sub >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiFunction.Arn}/invocations
  GalleryParameterOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: GalleryParameterResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
  GalleryListResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: "gallerylist"
  GalleryListGetRequest:
    Type: AWS::ApiGateway::Method
    DependsOn: ApiFunctionPermission
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref GalleryListResource
      AuthorizationScopes:
        - profile
        - email
        - openid
        - aws.cognito.signin.user.admin
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiAuthorizer
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiFunction.Arn}/invocations
  GalleryListOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: GalleryListResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: True
        UnusedAccountValidityDays: 14
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      UserPoolName: !Sub 'myf0t0-${AWS::StackName}'
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub 'myf0t0-${AWS::StackName}'
      UserPoolId: !Ref UserPool
  UserPoolAppClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - profile
        - email
        - openid
        - aws.cognito.signin.user.admin
      AllowedOAuthFlowsUserPoolClient: True
      CallbackURLs:
        - http://localhost:3000/
        - !Join
          - ''
          - - "https://"
            - !GetAtt
              - AppCloudFrontDistribution
              - DomainName
            - "/"
      ClientName: "MyF0t0"
      DefaultRedirectURI: "http://localhost:3000/"
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED
      SupportedIdentityProviders:
        - COGNITO
      UserPoolId: !Ref UserPool
  ResourceServer:
    Type: AWS::Cognito::UserPoolResourceServer
    Properties:
      Identifier: !Sub https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiStage}
      Name: "MyF0t0 Resource Server"
      UserPoolId: !Ref UserPool
  AdminRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Description: Site Administrator Role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
  ViewerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Sub "${AWS::Region}:${UserPoolAppClient}"
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Description: Site Photo Viewer Role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess
  AdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: Administrators
      GroupName: admin
      Precedence: 0
      RoleArn: !GetAtt AdminRole.Arn
      UserPoolId: !Ref UserPool
  ViewerGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: Administrators
      GroupName: viewers
      Precedence: 2
      RoleArn: !GetAtt ViewerRole.Arn
      UserPoolId: !Ref UserPool
  AdminUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      DesiredDeliveryMediums:
        - EMAIL
      Username: !Ref AdminEmail
      UserPoolId: !Ref UserPool
      UserAttributes:
        - Name: email
          Value: !Ref AdminEmail
        - Name: email_verified
          Value: True
  AdminUserGroupAttachment:
    Type: AWS::Cognito::UserPoolUserToGroupAttachment
    DependsOn:
      - AdminUser
      - AdminGroup
    Properties:
      GroupName: admin
      Username: !Ref AdminEmail
      UserPoolId: !Ref UserPool
  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: True
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolAppClient
          ProviderName: !Sub "cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}"
          ServerSideTokenCheck: TRUE
      DeveloperProviderName: !Ref UserPoolDomain
  AdminIdentityPoolAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        "authenticated": !GetAtt AdminRole.Arn
        "unauthenticated": !GetAtt ViewerRole.Arn
      RoleMappings:
        "userpool1":
          IdentityProvider: !Sub "cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}:${UserPoolAppClient}"
          AmbiguousRoleResolution: Deny
          Type: Rules
          RulesConfiguration:
            Rules:
              - Claim: "cognito:groups"
                MatchType: "Contains"
                Value: "admin"
                RoleARN: !GetAtt AdminRole.Arn
              - Claim: "cognito:groups"
                MatchType: "Contains"
                Value: "viewers"
                RoleARN: !GetAtt ViewerRole.Arn
Outputs:
  CognitoClientId:
    Value: !Ref UserPoolAppClient
    Description: ClientID for Cognito User Pool
  APIEndpoint:
    Value: !Sub https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiStage}
    Description: API Endpoint for REST API's
  AccessKeyForPhotographer:
    Value:
      !Ref PhotographerAccessKey
  SecretKeyForPhotographer:
    Value: !GetAtt PhotographerAccessKey.SecretAccessKey
  WebsiteURL:
    Value: !GetAtt AppCloudFrontDistribution.DomainName
    Description: URL for the hosted website
