[{"/home/michael/Documents/code/myf0t0/myf0t0/src/index.js":"1","/home/michael/Documents/code/myf0t0/myf0t0/src/App.js":"2"},{"size":155,"mtime":1627840737130,"results":"3","hashOfConfig":"4"},{"size":46079,"mtime":1627968092939,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"ogf09r",{"filePath":"9","messages":"10","errorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"/home/michael/Documents/code/myf0t0/myf0t0/src/index.js",[],["12","13"],"/home/michael/Documents/code/myf0t0/myf0t0/src/App.js",["14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43"],"import React from 'react';\nimport './index.css';\nimport Badge from 'react-bootstrap/Badge'\nimport Modal from 'react-bootstrap/Modal'\nimport Button from 'react-bootstrap/Button'\nimport Dropdown from 'react-bootstrap/Dropdown'\nimport DropdownButton from 'react-bootstrap/DropdownButton'\nimport ReactStars from 'react-stars'\n\nvar AWS = require('aws-sdk');\nconst { getSignedUrl } = require(\"@aws-sdk/s3-request-presigner\");\nconst { S3Client, GetObjectCommand } = require(\"@aws-sdk/client-s3\");\n\nvar AmazonCognitoIdentity = require('amazon-cognito-auth-js');\n\n\n\n// define the config for the Auth JS SDK\nvar authData = {\n  ClientId: process.env.REACT_APP_COGNITO_CLIENT_ID,\n  AppWebDomain: process.env.REACT_APP_COGNITO_APP_DOMAIN,\n  TokenScopesArray: process.env.REACT_APP_COGNITO_SCOPES.split(\",\"),\n  RedirectUriSignIn: process.env.REACT_APP_COGNITO_SIGN_IN_REDIRECT_URI,\n  RedirectUriSignOut: process.env.REACT_APP_COGNITO_SIGN_OUT_REDIRECT_URI,\n  UserPoolId: process.env.REACT_APP_COGNITO_USER_POOL_ID\n}\n\nclass Header extends React.Component {\n  constructor(props){\n    super(props);\n  }\n\n  handleNavClick=(view)=>{\n    this.props.navHandler(view);\n  }\n\n  render() {\n    return (<div className=\"header\">\n      <NavButton view=\"Photos\" navClickHandler={this.handleNavClick} currentView={this.props.view}/>\n      <NavButton view=\"Galleries\" navClickHandler={this.handleNavClick} currentView={this.props.view}/>\n      <NavButton view=\"Settings\" navClickHandler={this.handleNavClick} currentView={this.props.view}/>\n    </div>);\n  }\n}\n\nclass NavButton extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.handleNav = this.handleNav.bind(this);\n  }\n\n  handleNav(e){\n    this.props.navClickHandler(this.props.view)\n  }\n\n  render() {\n    var myClass = \"nav-button\"\n    if (this.props.view === this.props.currentView){\n      myClass = \"nav-button selected\"\n    }\n    return (\n      <span className={myClass} onClick={this.handleNav}> {this.props.view} </span>\n    )\n  }\n}\n\nclass Content extends React.Component {\n  constructor(props){\n    super(props);\n  }\n\n  render(){\n    console.log(this.props);\n    return (\n      <div className=\"content\">\n        {this.props.view === \"Photos\" && <PhotoFilterPane jwt={this.props.jwt} navHandler={this.props.navHandler}/>}\n        {this.props.view === \"Galleries\" && <GalleryList jwt={this.props.jwt} />}\n        {this.props.view === \"Settings\" && <Settings />}\n        {this.props.view === \"Gallery\" && <Gallery />}\n      </div>\n  )\n  }\n}\n\nclass PhotoDetailModal extends React.Component{\n  constructor(props){\n    super(props);\n\n    this.state = {\"tagEditing\": false }\n  }\n\n  componentDidMount(){\n    document.addEventListener(\"keydown\", this.photoNavShortcutHandler, false);\n  }\n\n  componentWillUnmount(){\n    document.removeEventListener(\"keydown\", this.photoNavShortcutHandler, false);\n  }\n\n  photoNavShortcutHandler = (e) => {\n    if (!this.state.tagEditing){\n      if (e.keyCode == 80 || e.keyCode == 39) {\n        this.props.photoFocusHandler(this.props.photo.previous)\n      } else if (e.keyCode == 78 || e.keyCode == 37) {\n        this.props.photoFocusHandler(this.props.photo.next)\n      }\n    }\n    \n  }\n\n  handlePrevClick = () => {\n    this.props.photoFocusHandler(this.props.photo.previous)\n  }\n\n  handleNextClick = () => {\n    this.props.photoFocusHandler(this.props.photo.next)\n  }\n\n  setTagEditing = (editing) => {\n    this.setState({\"tagEditing\": editing})\n  }\n\n  render(){\n    const galleryMode = this.props.jwt ? true : false\n    const next = this.props.photo.next ? true : false;\n    const previous = this.props.photo.previous ? true : false;\n\n    return (\n      <Modal\n      {...this.props}\n      //size=\"lg\"\n      dialogClassName=\"photo-modal\"\n      centered\n    >\n      <Modal.Header>\n        {next &&\n          <input type=\"button\" className=\"next-photo\" onClick={this.handleNextClick} value=\"Next\"/>\n        }\n        {previous &&\n          <input type=\"button\" className=\"prev-photo\" onClick={this.handlePrevClick} value=\"Prev\"/>\n        }\n\n      </Modal.Header>\n      <Modal.Body id=\"photo-modal-body\">\n        {this.props.jwt &&\n          <div className=\"detail-photo\">\n            <PhotoDetailSigner data={this.props.photo} />\n            <PhotoDetailData data={this.props.photo} jwt={this.props.jwt} updateHandler={this.props.updateHandler} tagEditing={this.state.tagEditing} setTagEditing={this.setTagEditing}/>\n          </div>\n        }\n        {!this.props.jwt &&\n          <div className=\"detail-photo\">\n            <PhotoDetailImage url={this.props.photo.signed_url} />\n          </div>\n        }\n\n      </Modal.Body>\n      <Modal.Footer>\n        <Button className=\"btn btn-secondary\" onClick={this.props.onHide}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n  }\n}\n\nclass PhotoDetailData extends React.Component{\n  constructor(props){\n    super(props);\n  }\n\n  render() {\n    const exif = this.props.data.exif;\n\n    var photoName = \"\"\n    if (\"SK\" in this.props.data){\n      //var firstIndex = this.props.data.SK.indexOf('_');\n      const sk = this.props.data.SK\n      photoName = sk.substr(sk.indexOf('_')+1)\n      //photoName = this.props.data.SK.split(\"_\")[1];\n    }\n    console.debug(this.props.data);\n    return(\n      <div className=\"photo-data\">\n        { photoName && <h1> {photoName}</h1>}\n        <PhotoRating data={this.props.data} jwt={this.props.jwt} updateHandler={this.props.updateHandler} tagEditing={this.props.tagEditing}/>\n        <PhotoTagPane photo={this.props.data} jwt={this.props.jwt} updateHandler={this.props.updateHandler} setTagEditing={this.props.setTagEditing}/>\n        { exif &&\n          <PhotoExifData exif={exif} />\n        }\n      </div>\n    )\n  }\n\n}\n\nclass PhotoTagCloud extends React.Component{\n  constructor(props){\n    super(props);\n  }\n\n  render(){\n    var tagList = \"No Tags.\"\n    if(this.props.tags){\n      tagList = this.props.tags.map((tag) => (\n          <PhotoTag tag={tag} removeTagFunction={this.props.removeTagFunction}/>\n      ));\n    }\n\n    return(\n      <div className=\"tag-cloud\">\n      <ul>\n       {tagList}\n     </ul>\n     </div>\n   )\n  }\n\n}\n\nclass PhotoTag extends React.Component{\n  constructor(props){\n    super(props);\n  }\n\n  getTagColor(tag){\n      //TODO - use a pseudorandom color based on the Tag name as a seed\n      var myrng = new Math.seedrandom(tag);\n      var color_index = Math.round(5.0 * myrng.quick())\n      const colors = [\"green\", \"red\", \"blue\", \"yellow\", \"orange\", \"light-blue\"]\n      return(colors[color_index])\n  }\n\n  removeButtonHandler = () => {\n    this.props.removeTagFunction(this.props.tag)\n  }\n\n  render(){\n    const style = {\"background-color\": this.getTagColor(this.props.tag)}\n    return(\n      <div className=\"photo-tag\" style={style} >\n        <span> {this.props.tag} </span> <button  type=\"button\" className=\"tag-button\" onClick={this.removeButtonHandler}>x</button>\n      </div>\n    )\n  }\n}\n\nclass PhotoTagInput extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\"tag_value\": \"\"}\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount(){\n    document.addEventListener(\"keydown\", this.tagShortcutHandler, false);\n  }\n  componentWillUnmount(){\n    document.removeEventListener(\"keydown\", this.tagShortcutHandler, false);\n  }\n\n  tagShortcutHandler = (event) => {\n    if (event.keyCode == 84) {\n      if (document.activeElement != this.nameInput){\n        this.nameInput.focus()\n        event.preventDefault();\n      }\n    }\n  }\n\n  addButtonHandler = () => {\n    this.props.addTagFunction(this.state.tag_value)\n    this.setState({\"tag_value\": \"\"})\n    this.nameInput.blur()\n  }\n\n  handleChange = (e) => {\n    this.setState({\"tag_value\": e.target.value})\n  }\n\n  handleKeyUp = (e) => {\n    if (e.keyCode == 13){\n      this.props.addTagFunction(this.state.tag_value)\n      this.setState({\"tag_value\": \"\"})\n      this.nameInput.blur()\n    }\n  }\n\n  handleFocus = () => {\n    this.props.setTagEditing(true);\n  }\n\n  handleBlur = () => {\n    this.props.setTagEditing(false);\n  }\n\n  render(){\n    const curr_value = this.state.tag_value;\n    return(\n      <div className=\"tag-input\">\n        Add Tag: <input id=\"tag-input\" ref={(input) => { this.nameInput = input; }} className=\"tag-input-box\" value={curr_value} onChange={this.handleChange} onKeyUp={this.handleKeyUp} onFocus={this.handleFocus} onBlur={this.handleBlur}/>\n        { curr_value &&\n          <button  type=\"button\" className=\"btn btn-secondary tag-input-button\" onClick={this.addButtonHandler}>ok</button>\n        }\n      </div>\n    )\n  }\n}\n\nclass PhotoTagPane extends React.Component{\n  constructor(props){\n    super(props);\n    this.addTag = this.addTag.bind(this);\n    this.removeTag = this.removeTag.bind(this);\n  }\n\n  async addTag(tag){\n    //Make the API call to add the Tag.\n    console.debug(this.props);\n    if (this.props.jwt){\n      const requestOptions = {\n        mode: 'cors',\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: this.props.jwt\n        }\n      };\n      var url = new URL(process.env.REACT_APP_API_ENDPOINT + \"/tag\");\n      const params = {\"photo_id\": this.props.photo.SK, \"tag\": tag}\n      console.debug(params);\n      url.search = new URLSearchParams(params).toString();\n      fetch(url, requestOptions)\n        .then(response => response.json())\n        .then(data => {\n          console.log(data)\n\n          //Update the metadata state to add the tag.\n          console.debug(this.props.photo.tags);\n          var new_tags = []\n          if (this.props.photo.tags){\n            new_tags = [...this.props.photo.tags];\n          }\n          new_tags.push(tag)\n          this.props.updateHandler(this.props.photo.SK, \"tags\", new_tags)\n        })\n    }\n  }\n\n  async removeTag(tag){\n    //Make the API call to remove the Tag\n    console.debug(this.props);\n    if (this.props.jwt){\n      const requestOptions = {\n        mode: 'cors',\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: this.props.jwt\n        }\n      };\n      var url = new URL(process.env.REACT_APP_API_ENDPOINT + \"/tag\");\n      const params = {\"photo_id\": this.props.photo.SK, \"tag\": tag}\n      console.debug(params);\n      url.search = new URLSearchParams(params).toString();\n      fetch(url, requestOptions)\n        .then(response => response.json())\n        .then(data => {\n          console.log(data)\n\n          //Update the metadata state to add the tag.\n          console.debug(this.props.photo.tags);\n          var new_tags = [...this.props.photo.tags];\n\n          var tag_index = -1;\n          for (var i=0; i<new_tags.length; i++){\n            console.debug(new_tags[i] + \" =?= \" +tag);\n            if (new_tags[i] === tag){\n              tag_index = i;\n            }\n          }\n\n          console.debug(\"tag_index: \" + tag_index.toString());\n\n          if(tag_index > -1){\n            new_tags.splice(tag_index, 1)\n            this.props.updateHandler(this.props.photo.SK, \"tags\", new_tags)\n          }\n        })\n    }\n  }\n\n  render(){\n    return(\n      <div id=\"tag-pane\" className=\"tag-pane\">\n        <PhotoTagCloud tags={this.props.photo.tags} removeTagFunction={this.removeTag }/>\n        <PhotoTagInput addTagFunction={this.addTag} setTagEditing={this.props.setTagEditing}/>\n      </div>\n    )\n  }\n\n}\n\nclass PhotoRating extends React.Component{\n  constructor(props){\n    super(props);\n    this.setRating = this.setRating.bind(this);\n  }\n\n  componentDidMount(){\n    document.addEventListener(\"keydown\", this.ratingShortcutHandler, false);\n  }\n  componentWillUnmount(){\n    document.removeEventListener(\"keydown\", this.ratingShortcutHandler, false);\n  }\n\n  ratingShortcutHandler = (e) =>{\n    if(!this.props.tagEditing){\n      if (e.keyCode >= 49 && e.keyCode <=53){\n        this.setRating(e.keyCode-48)\n        e.preventDefault();\n      }\n    }\n  }\n\n  handleRatingClick = (rating) => {\n      console.log(rating);\n      console.log(this.props);\n      this.setRating(rating);\n  }\n\n  async setRating(rating) {\n    console.debug(this.props);\n    if (this.props.jwt){\n      const requestOptions = {\n        mode: 'cors',\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: this.props.jwt\n        }\n      };\n      console.debug(this.props);\n      var url = new URL(process.env.REACT_APP_API_ENDPOINT + \"/rating\");\n      const params = {\"photo_id\": this.props.data.SK, \"rating\": rating}\n      url.search = new URLSearchParams(params).toString();\n      fetch(url, requestOptions)\n        .then(response => response.json())\n        .then(data => {\n          console.log(data)\n          this.props.updateHandler(this.props.data.SK, \"GSI1PK\", rating)\n        })\n    }\n  }\n\n  render() {\n    const current_rating = parseInt(this.props.data.GSI1PK);\n    return(\n      <ReactStars name=\"star-rating\" count={5} onChange={this.handleRatingClick} size={30} half={false} value={current_rating}/>\n    )\n  }\n}\n\nclass PhotoExifData extends React.Component{\n  constructor(props){\n    super(props);\n  }\n\n  formatExif(exif){\n    var formatted_exif = {}\n    if(\"ApertureValue\" in exif){\n      const regexpAperture = /\\(([0-9]+)\\, ([0-9]+)\\)/;\n      const match = exif[\"ApertureValue\"].match(regexpAperture);\n      formatted_exif[\"Aperture\"] = (parseFloat(match[1])/parseFloat(match[2])).toFixed(2);\n    }\n\n    if(\"FNumber\" in exif){\n      const regexpFNumber= /\\(([0-9]+)\\, ([0-9]+)\\)/;\n      const match = exif[\"FNumber\"].match(regexpFNumber);\n      formatted_exif[\"FNumber\"] = (parseFloat(match[1])/parseFloat(match[2])).toFixed(2);\n    }\n\n    if(\"ExposureTime\" in exif){\n      const regexpExposure= /\\(([0-9]+)\\, ([0-9]+)\\)/;\n      const match = exif[\"ExposureTime\"].match(regexpExposure);\n      //Get exposure time in ms\n      const exposureTime = (parseFloat(match[1])/(parseFloat(match[2])*1000.0)).toFixed(0);\n      formatted_exif[\"Exposure Time\"] = `${exposureTime}ms`\n    }\n\n    if(\"ExifImageHeight\" in exif){\n      const height = exif[\"ExifImageHeight\"];\n      formatted_exif[\"Image Height\"] = `${height}px`\n    }\n\n    if(\"ExifImageWidth\" in exif){\n      const width = exif[\"ExifImageWidth\"];\n      formatted_exif[\"Image Width\"] = `${width}px`\n    }\n\n    if(\"DateTime\" in exif){\n      formatted_exif[\"Date Taken\"] = exif[\"DateTime\"]\n    }\n\n    if(\"Make\" in exif){\n      formatted_exif[\"Make\"] = exif[\"Make\"]\n    }\n\n    if(\"Model\" in exif){\n      formatted_exif[\"Model\"] = exif[\"Model\"]\n    }\n\n    return formatted_exif;\n\n  }\n\n  render(){\n    const exif = this.formatExif(this.props.exif);\n    if(exif){\n      return(\n        <div>\n        {\n          Object.keys(exif).map((key, i) => (\n\n            <p key={i}>\n              <span>{key}: {exif[key]}</span>\n            </p>\n          ))\n        }\n        </div>\n      )\n    }\n    return(<div />);\n  }\n\n}\n\nclass PhotoDetailSigner extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount () {\n    this.generateSignedUrl();\n  }\n\n  componentDidUpdate(prevProps){\n    if (prevProps.data.GSI1SK != this.props.data.GSI1SK){\n      this.generateSignedUrl();\n    }\n  }\n\n  generateSignedUrl = () => {\n    //Extract the bucket and object key from the response\n    const image_key_arr = this.props.data.GSI1SK.split(\"/\", 1);\n    const image_bucket = image_key_arr[0];\n    const image_key = this.props.data.GSI1SK.slice(image_bucket.length + 1)\n\n    /*\n    Sign a URL for the thumbnail using the Role associated with our login so that we can\n    access the private bucket.\n    */\n    const clientParams = {\n      region: process.env.REACT_APP_AWS_REGION,\n      credentials: AWS.config.credentials\n    }\n    const getObjectParams = {\n      Bucket:image_bucket,\n      Key: image_key\n    }\n    const client = new S3Client(clientParams);\n    const command = new GetObjectCommand(getObjectParams);\n    getSignedUrl(client, command, { expiresIn: 3600 })\n    .then((url) => {\n      this.setState({url: url});\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n  }\n\n  render(){\n    const url = this.state.url;\n    if (url){\n      return(<PhotoDetailImage url={url} />);\n    } else {\n      return null;\n    }\n\n  }\n}\n\nclass PhotoDetailImage extends React.Component{\n  constructor (props) {\n    super(props);\n  }\n\n  render() {\n    return (\n        <img className=\"detail-photo\" src={this.props.url} alt=\"\"/>\n    );\n  }\n}\n\nclass Gallery extends React.Component{\n  constructor(props){\n    super(props);\n    this.getPhotoData = this.getPhotoData.bind(this);\n    this.updatePhotoData = this.updatePhotoData.bind(this);\n    this.state = {photos: [], title: \"\", fetching_data: false}\n  }\n\n  componentDidMount(){\n    this.getPhotoData();\n  }\n\n  getPhotoData(){\n    if(this.state.fetching_data){\n      console.log(\"Already fetching data, skiping data refresh.\")\n      return;\n    }\n\n    this.setState({fetching_data: true});\n    const urlParams = new URLSearchParams(window.location.search);\n    const gallery_id = urlParams.get('gallery');\n    console.log(\"Gallery_ID: \" + gallery_id)\n    const requestOptions = {\n      mode: 'cors',\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      }\n    };\n    var url = new URL(process.env.REACT_APP_API_ENDPOINT + \"/gallery/\" + gallery_id);\n    fetch(url, requestOptions)\n      .then(response => response.json())\n      .then(data => {\n        console.log(data)\n\n        var newPhotos = data[\"Items\"]\n\n        this.setState({photos: newPhotos, title: data[\"GalleryName\"], fetching_data: false})\n      })\n      .catch(error => {\n        console.log(error);\n     });\n  }\n\n  updatePhotoData(photo_id, key, value){\n    console.log(\"PhotoUpdate from gallery\")\n  }\n\n  render(){\n    console.debug(\"Rendering Gallery\")\n    var results_truncated = false;\n\n    return (\n        <PhotoFlow title={this.state.title} photos={this.state.photos} results_truncated={results_truncated} get_photos={this.getPhotoData} update_metadata={this.updatePhotoData}/>\n    )\n  }\n}\n\nclass PhotoFlowData extends React.Component{\n  constructor(props){\n    super(props);\n    console.debug(\"PhotoFlowData Constructor\")\n    this.getPhotoData = this.getPhotoData.bind(this)\n    this.updatePhotoData = this.updatePhotoData.bind(this);\n    this.state = {photos: [], fetching_data: false}\n  }\n\n  componentDidMount(){\n    this.getPhotoData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.filters !== prevProps.filters || this.state.photos == []) {\n      this.getPhotoData(true);\n    }\n  }\n\n  getPhotoData(reset){\n    var params = {}\n\n    if(this.state.fetching_data){\n      console.log(\"Already fetching data, skiping data refresh.\")\n      return;\n    }\n\n    if(typeof this.props.filters === 'undefined'){\n      console.debug(\"Filters undefined in refreshData()\")\n      return;\n    }\n\n    for (const [key, value] of Object.entries(this.props.filters)){\n      if (value){\n        params[key] = value;\n      }\n    }\n\n    if(this.state.last_photo_key && !reset){\n      params[\"LastPhotoKey\"] = this.state.last_photo_key;\n    }\n\n    params[\"max_results\"] = 50;\n\n    this.setState({fetching_data: true});\n    /*\n    Make sure the async process to fetch access tokens has completed before continuing.\n    */\n    if (this.props.jwt){\n      const requestOptions = {\n        mode: 'cors',\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: this.props.jwt\n        }\n      };\n      var url = new URL(process.env.REACT_APP_API_ENDPOINT + \"/photo\");\n      url.search = new URLSearchParams(params).toString();\n      fetch(url, requestOptions)\n        .then(response => response.json())\n        .then(data => {\n          console.log(data)\n\n          var newPhotos;\n          if(reset){\n            newPhotos = data[\"Items\"]\n          } else {\n            newPhotos = this.state.photos.concat(data[\"Items\"])\n          }\n\n          this.setState({photos: newPhotos, fetching_data: false})\n\n          /*\n          Check to see if we got a \"LastEvaluatedKey\".  If so, there\n          are more pages of thumbnails that match our filters.\n          */\n          var lpk = \"\";\n          if (\"LastPhotoKey\" in data){\n            lpk = data[\"LastPhotoKey\"];\n          }\n          console.debug(\"LPK: \" + lpk)\n          this.setState({last_photo_key: lpk})\n\n          /*\n          Check to see if there are more photos to get AND we have space left\n          on the visible page.  If so, keep getting thumbnails.\n          */\n          // if(lek && document.body.clientHeight < window.innerHeight){\n          //   console.debug(\"MOAR DATA\")\n          //   this.getPhotoData()\n          // }\n        })\n        .catch(error => {\n          console.log(error);\n       });\n    } else {\n      console.log(\"No JWT Token yet.\");\n    }\n  }\n\n  updatePhotoData(photo_id, key, value){\n    let photos = [...this.state.photos]\n    var i;\n    for (i=0; i<photos.length; i++){\n      if (photos[i][\"SK\"] === photo_id){\n        //Check if a filter has changed such that this photo would be excluded.\n        //This should only happen if the rating filter is set to \"unrated\"\n        if(this.props.filters.rating === \"unrated\" && key === \"GSI1PK\"){\n          photos.splice(i, 1)\n        } else {\n          //If it wasn't a filter update, update the metadata value.\n          let photo = {...photos[i]}\n          photo[key] = value;\n          photos[i] = photo;\n        }\n\n        //No matter what changed, update the photos.\n        this.setState({photos: photos})\n        break;\n      }\n    }\n  }\n\n  render(){\n    console.debug(\"Rendering PhotoFlowData\")\n    var results_truncated = false;\n    if(this.state.last_photo_key){\n      results_truncated = true;\n    }\n\n    return (\n        <PhotoFlow title={this.props.title} photos={this.state.photos} results_truncated={results_truncated} get_photos={this.getPhotoData} update_metadata={this.updatePhotoData} jwt={this.props.jwt}/>\n    )\n  }\n}\n\nclass PhotoFlow extends React.Component {\n  constructor(props){\n    super(props);\n    console.debug(\"PhotoFlow Constructor!\")\n    this.handlePhotoFocus = this.handlePhotoFocus.bind(this)\n    this.handleMetadataUpdate = this.handleMetadataUpdate.bind(this)\n    this.closePhotoFocus = this.closePhotoFocus.bind(this)\n\n    this.state = {\n      focusPhoto:{},\n      focusModalVisible:false,\n      fetching_data: false\n    }\n  }\n\n  handleMetadataUpdate(photo_id, key, value){\n    this.props.update_metadata(photo_id, key, value);\n\n    if (this.state.focusPhoto.SK === photo_id){\n      var photo = this.state.focusPhoto;\n      photo[key] = value;\n      this.setState({\"focusPhoto\": photo})\n    }\n  }\n\n  handlePhotoFocus(photo){\n    this.setState({focusPhoto: photo, focusModalVisible: true});\n\n    //If there is no previous photo set but there *are* more results, fetch the next batch.\n    //This happens if we hit the end of the current batch using the navigation buttons in the photo detail modal.\n    if(!photo.previous && this.props.results_truncated){\n      this.props.get_photos();\n    }\n  }\n\n  closePhotoFocus(){\n    this.setState({focusModalVisible: false});\n  }\n\n  componentDidMount(){\n    document.addEventListener('scroll', this.trackScrolling);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('scroll', this.trackScrolling);\n  }\n\n  isBottom(el) {\n    return el.getBoundingClientRect().bottom <= window.innerHeight;\n  }\n\n  trackScrolling = () => {\n    const wrappedElement = document.getElementById('photoFlowDiv');\n    //console.debug(\"Scrolling\")\n    if (this.isBottom(wrappedElement)) {\n      //console.debug(\"BOTTOM!\")\n      console.log('photoFlow bottom reached');\n      if(this.props.results_truncated){\n        this.props.get_photos();\n      }\n    }\n  };\n\n  render() {\n    //Assume a sorted list of photos has come back from the API.\n    var photo_groups = []\n    var curr_header = \"\"\n    var groups = 0\n    //console.log(this.state.photos);\n    var listItems = \"No Photos To Display.\"\n    if(this.props.photos){\n      for(var i=0; i<this.props.photos.length; i++){\n        var photo = this.props.photos[i];\n\n        if (i>0){\n          photo.next = this.props.photos[i-1]\n        }\n\n        if (i < this.props.photos.length - 1){\n          photo.previous = this.props.photos[i+1]\n        }\n\n        //console.log(photo);\n        if (curr_header !== photo.SK.split(\"T\")[0]){\n          curr_header = photo.SK.split(\"T\")[0]\n          photo_groups.push({header: curr_header, photos: []});\n          groups++;\n        }\n        photo_groups[groups-1]['photos'].push(photo);\n      };\n\n      listItems = photo_groups.map((photo_data) => (\n          <li className=\"photo-group\" key={photo_data.header}><PhotoGroup header={photo_data.header} data={photo_data.photos} photoFocusHandler={this.handlePhotoFocus}/></li>\n      ));\n    }\n\n    var title = \"\"\n    if(this.props.title){\n      title = this.props.title;\n    }\n\n    return (\n       <div id='photoFlowDiv'>\n       <br/>\n       {title &&\n         <span className=\"section-title\">{title}</span>\n       }\n       <ul className=\"photo-group\">\n          {listItems}\n        </ul>\n\n          <PhotoDetailModal\n            show={this.state.focusModalVisible}\n            onHide={this.closePhotoFocus}\n            photo={this.state.focusPhoto}\n            jwt={this.props.jwt}\n            updateHandler={this.handleMetadataUpdate}\n            photoFocusHandler={this.handlePhotoFocus}\n          />\n      </div>\n    )\n  }\n}\n\nclass PhotoGroup extends React.Component{\n  constructor(props){\n    super(props);\n  }\n  render(){\n    const listItems = this.props.data.map((photo) =>\n      <li key={photo.SK}><Thumbnail data={photo} onClickHandler={this.props.photoFocusHandler}/> </li>\n    );\n    return(\n      <div>\n        <h4 className=\"group-divider\">{this.props.header}</h4>\n        <ul className=\"ul_thumbnail\">\n          {listItems}\n        </ul>\n      </div>\n    )\n  }\n}\n\nclass Thumbnail extends React.Component{\n  constructor(props){\n    super(props);\n    this.clickHandler = this.clickHandler.bind(this)\n    this.state = {clickHandler: this.clickHandler};\n  }\n\n  clickHandler(){\n    this.props.onClickHandler(this.props.data)\n  }\n\n  componentDidMount () {\n    //Extract the bucket and object key from the response\n    const thumbnail_arr = this.props.data.thumbnail_key.split(\"/\", 1);\n    const thumbnail_bucket = thumbnail_arr[0];\n    const thumbnail_key = this.props.data.thumbnail_key.slice(thumbnail_bucket.length + 1)\n\n    var url = \"\";\n    if (this.props.data.signed_thumbnail_url){\n      url = this.props.data.signed_thumbnail_url\n      this.setState({url: url});\n    } else {\n      /*\n      Sign a URL for the thumbnail using the Role associated with our login so that we can\n      access the private bucket.\n      */\n      const clientParams = {\n        region: process.env.REACT_APP_AWS_REGION,\n        credentials: AWS.config.credentials\n      }\n      const getObjectParams = {\n        Bucket: thumbnail_bucket,\n        Key: thumbnail_key\n      }\n      const client = new S3Client(clientParams);\n      const command = new GetObjectCommand(getObjectParams);\n      getSignedUrl(client, command, { expiresIn: 3600 })\n      .then((url) => {\n        this.setState({url: url});\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n    }\n  }\n\n  render(){\n    const url = this.state.url;\n    const clickHandler = this.state.clickHandler;\n    if (url){\n      return(<ThumbnailImage url={url} clickHandler={clickHandler} />);\n    } else {\n      return null;\n    }\n\n  }\n}\n\nclass ThumbnailImage extends React.Component{\n  constructor (props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n        <img className=\"thumbnail\" src={this.props.url} alt=\"\" onClick={this.props.clickHandler}/>\n    );\n  }\n}\n\nclass PhotoFilterPane extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.togglePane = this.togglePane.bind(this)\n    this.handleValueChanged = this.handleValueChanged.bind(this)\n    this.submitFilters = this.submitFilters.bind(this)\n    this.cancelFilters = this.cancelFilters.bind(this)\n    this.loadFilterValuesFromStorage = this.loadFilterValuesFromStorage.bind(this);\n    this.saveFilterValuesToStorage = this.saveFilterValuesToStorage.bind(this);\n    this.saveGalleryClickHandler = this.saveGalleryClickHandler.bind(this);\n    this.saveGalleryFunction = this.saveGalleryFunction.bind(this);\n    this.closeGallerySaveModal = this.closeGallerySaveModal.bind(this);\n\n    this.state = {\n      \"pane_open\": false,\n      \"gallerySaveModalVisible\": false\n    }\n  }\n\n  componentDidMount(){\n    this.loadFilterValuesFromStorage();\n  }\n\n  loadFilterValuesFromStorage(){\n    var start_date = localStorage.getItem('start_date_filter')\n    if (typeof start_date === 'undefined'){\n      start_date = \"\"\n    }\n\n    var end_date = localStorage.getItem('end_date_filter')\n    if (typeof end_date === 'undefined'){\n      end_date = \"\"\n    }\n\n    var rating = localStorage.getItem('rating_filter')\n    if (typeof rating === 'undefined'){\n      rating = \"all\"\n    }\n\n    var tags = localStorage.getItem('tags_filter')\n    if ( typeof tags === 'undefined'){\n      tags = \"\"\n    }\n\n    console.debug(\"start_date: \" + start_date)\n    console.debug(\"end_date: \" + end_date)\n    console.debug(\"rating: \" + rating)\n    console.debug(\"tags: \" + tags)\n\n    this.setState(\n      {\n        \"current_filter_values\": {\n          \"start_date\": start_date,\n          \"end_date\": end_date,\n          \"rating\": rating,\n          \"tags\": tags\n        },\n        \"filter_values\": {\n          \"start_date\": start_date,\n          \"end_date\": end_date,\n          \"rating\": rating,\n          \"tags\": tags\n        }\n      }\n    );\n  }\n\n  saveFilterValuesToStorage(){\n    if(this.state.current_filter_values.start_date != null){\n      localStorage.setItem('start_date_filter', this.state.current_filter_values.start_date)\n    }\n    if(this.state.current_filter_values.end_date != null){\n      localStorage.setItem('end_date_filter', this.state.current_filter_values.end_date)\n    }\n    if(this.state.current_filter_values.rating != null){\n      localStorage.setItem('rating_filter', this.state.current_filter_values.rating)\n    }\n    if(this.state.current_filter_values.tags != null){\n      localStorage.setItem('tags_filter', this.state.current_filter_values.tags)\n    }\n  }\n\n  togglePane(){\n    this.setState({\n      \"pane_open\": !this.state.pane_open\n    })\n  }\n\n  handleValueChanged(field, value){\n    console.debug(\"In handleValueChanged\")\n    console.debug(\"field: \" + field)\n    console.debug(\"value: \" + value)\n    var filter_vals = Object.assign({}, this.state.current_filter_values);\n    filter_vals[field] = value\n\n    console.debug(filter_vals)\n\n    this.setState({current_filter_values: filter_vals})\n  }\n\n  submitFilters(){\n    console.debug(this.state.current_filter_values)\n    this.saveFilterValuesToStorage()\n    this.togglePane()\n    var filter_vals = Object.assign({}, this.state.current_filter_values);\n    this.setState({\"filter_values\": filter_vals});\n  }\n\n  cancelFilters(){\n    console.debug(\"Cancel Filters\")\n    this.loadFilterValuesFromStorage();\n    this.togglePane();\n  }\n\n  saveGalleryClickHandler(){\n    this.setState({'gallerySaveModalVisible': true})\n  }\n\n  saveGalleryFunction(name){\n    if (this.props.jwt){\n      var filter_params = {}\n      for (const [key, value] of Object.entries(this.state.current_filter_values)){\n        if (value){\n          filter_params[key] = value;\n        }\n      }\n\n      const requestOptions = {\n        mode: 'cors',\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: this.props.jwt\n        }\n      };\n      console.debug(this.props);\n      var url = new URL(process.env.REACT_APP_API_ENDPOINT + \"/gallery\");\n      const params = {\"name\": name, \"filters\": JSON.stringify(filter_params)}\n      url.search = new URLSearchParams(params).toString();\n      fetch(url, requestOptions)\n        .then(response => response.json())\n        .then(data => {\n          console.log(data)\n          this.props.navHandler(\"Galleries\")\n        })\n    }\n  }\n\n  closeGallerySaveModal(){\n    this.setState({'gallerySaveModalVisible': false})\n  }\n\n  render(){\n    console.debug(\"Rendering FilterPane\")\n    console.debug(this.state.filter_values)\n    const filter_values = this.state.filter_values;\n    const isPaneOpen = this.state.pane_open;\n    return (\n      <div className=\"filter-pane\">\n        <button  type=\"button\" className=\"btn btn-secondary\" onClick={this.togglePane}> {isPaneOpen ? 'Hide Filters' : 'Show Filters'} </button>\n\n        {isPaneOpen &&\n          <div className=\"filter-table\">\n            <table><tbody>\n              <tr>\n                <td> Start Date</td>\n                <td> End Date</td>\n                <td> Rating </td>\n                <td> Tags </td>\n              </tr>\n              <tr>\n                <td> <DateFilterControl field=\"start_date\" value={this.state.current_filter_values.start_date} onValueChange={this.handleValueChanged}/> </td>\n                <td> <DateFilterControl field=\"end_date\" value={this.state.current_filter_values.end_date} onValueChange={this.handleValueChanged}/> </td>\n                <td> <RatingFilterControl field=\"rating\" value={this.state.current_filter_values.rating} onValueChange={this.handleValueChanged}/> </td>\n                <td> <TagsFilterControl field=\"tags\" value={this.state.current_filter_values.tags} onValueChange={this.handleValueChanged}/></td>\n              </tr>\n              <tr>\n                <td> <button type=\"button\" className=\"btn btn-secondary\" onClick={this.submitFilters}>Submit</button> </td>\n                <td> <button type=\"button\" className=\"btn btn-secondary\" onClick={this.cancelFilters}>Cancel</button></td>\n                <td> <button type=\"button\" className=\"btn btn-secondary\" onClick={this.saveGalleryClickHandler}>Create Gallery</button></td>\n              </tr>\n            </tbody></table>\n          </div>\n        }\n        <PhotoFlowData jwt={this.props.jwt} filters={filter_values} title=\"\"/>\n        <GallerySaveModal\n          show={this.state.gallerySaveModalVisible}\n          cancelFunction={this.closeGallerySaveModal}\n          saveFunction={this.saveGalleryFunction}\n        />\n      </div>\n    )\n  }\n}\n\nclass GallerySaveModal extends React.Component{\n  constructor(props){\n    super(props);\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSaveClick = this.handleSaveClick.bind(this)\n    this.handleCancelClick = this.handleCancelClick.bind(this)\n    this.state = {'value': ''}\n  }\n\n  handleChange(e){\n    this.setState({'value': e.target.value})\n  }\n\n  handleSaveClick(e){\n    const value = this.state.value;\n    this.setState({'value':''})\n    this.props.saveFunction(value)\n\n  }\n\n  handleCancelClick(e){\n    this.setState({'value': ''})\n    this.props.cancelFunction()\n  }\n\n  render(){\n    return(\n      <Modal show={this.props.show} onHide={this.handleCancelClick} size=\"sm\">\n        <Modal.Header closeButton>\n          <Modal.Title> Enter Name </Modal.Title>\n        </Modal.Header>\n\n      <Modal.Body>\n        <div>\n          Enter a name for the new Gallery <br/>\n          <input value={this.state.value} onChange={this.handleChange}/>\n        </div>\n      </Modal.Body>\n\n      <Modal.Footer>\n        <Button variant=\"secondary\" onClick={this.handleCancelClick}>\n          Cancel\n        </Button>\n        <Button variant=\"primary\" onClick={this.handleSaveClick}>\n          Save\n        </Button>\n      </Modal.Footer>\n    </Modal>\n\n    )\n  }\n}\n\nclass DateFilterControl extends React.Component{\n  constructor(props){\n    super(props);\n    this.handleChange = this.handleChange.bind(this)\n    this.state = {'value': this.props.value}\n  }\n\n  handleChange(e){\n    this.setState({'value': e.target.value});\n    console.debug(Date.parse(e.target.value))\n    if(Date.parse(e.target.value)){\n      console.debug(\"It worked!\");\n      this.props.onValueChange(this.props.field, e.target.value);\n    }\n  }\n\n  render(){\n    console.debug(\"debug\");\n    return(\n    <input value={this.state.value} onChange={this.handleChange} />\n  )\n  }\n}\n\nclass RatingFilterControl extends React.Component{\n  constructor(props){\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {'value': this.props.value}\n  }\n\n  handleChange(e){\n    console.debug(e)\n    this.setState({'value': e});\n    this.props.onValueChange(this.props.field, e);\n  }\n\n  render(){\n    const keyval = {\n      \"all\": \"All Ratings\",\n      \"1\": \"1+\",\n      \"2\": \"2+\",\n      \"3\": \"3+\",\n      \"4\": \"4+\",\n      \"5\": \"5\",\n      \"unrated\": \"Unrated\"\n    }\n\n    const title = keyval[this.state.value]\n    return (\n      <DropdownButton id=\"rating_filter\" title={title} onSelect={this.handleChange}>\n        <Dropdown.Item eventKey=\"all\">All Ratings</Dropdown.Item>\n        <Dropdown.Item eventKey=\"1\">1+</Dropdown.Item>\n        <Dropdown.Item eventKey=\"2\">2+</Dropdown.Item>\n        <Dropdown.Item eventKey=\"3\">3+</Dropdown.Item>\n        <Dropdown.Item eventKey=\"4\">4+</Dropdown.Item>\n        <Dropdown.Item eventKey=\"5\">5</Dropdown.Item>\n        <Dropdown.Divider />\n        <Dropdown.Item eventKey=\"unrated\">Unrated</Dropdown.Item>\n      </DropdownButton>\n    )\n  }\n}\n\nclass TagsFilterControl extends React.Component{\n  constructor(props){\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {'value': this.props.value}\n  }\n\n  handleChange(e){\n    this.setState({'value': e.target.value});\n    this.props.onValueChange(this.props.field, e.target.value);\n  }\n\n  render(){\n    return(\n      <input value={this.state.value} onChange={this.handleChange} />\n    )\n  }\n}\n\nclass GalleryList extends React.Component {\n  constructor(props){\n    super(props);\n  }\n\n  render() {\n    return (\n      <GalleryListingData jwt={this.props.jwt} />\n    )\n  }\n}\n\nclass GalleryListingData extends React.Component{\n  constructor(props){\n    super(props);\n    this.getGalleryList = this.getGalleryList.bind(this)\n    this.deleteGallery = this.deleteGallery.bind(this)\n    this.state = {fetching_data: false, galleryItems: []}\n  }\n\n  deleteGallery(e){\n    console.log(e)\n    const gallery_name = e.target.value\n    if (this.props.jwt){\n      const requestOptions = {\n        mode: 'cors',\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: this.props.jwt\n        }\n      };\n      var url = new URL(process.env.REACT_APP_API_ENDPOINT + \"/gallery\");\n      const params = {\"name\": gallery_name}\n      url.search = new URLSearchParams(params).toString();\n      fetch(url, requestOptions)\n        .then(response => response.json())\n        .then(data => {\n          console.log(data)\n\n          //For now, assume that if we've gotten this far the delete was successful.\n          var newGalleryItems = [...this.state.galleryItems]\n          var i;\n          for (i=0; i<newGalleryItems.length; i++){\n            if (newGalleryItems[i][\"SK\"] === gallery_name){\n              newGalleryItems.splice(i, 1)\n              this.setState({galleryItems: newGalleryItems})\n              break;\n            }\n          }\n        }\n      )\n    }\n  }\n\n  getGalleryList(){\n    this.setState({fetching_data: true});\n    /*\n    Make sure the async process to fetch access tokens has completed before continuing.\n    */\n    if (this.props.jwt){\n      const requestOptions = {\n        mode: 'cors',\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: this.props.jwt\n        }\n      };\n      var url = new URL(process.env.REACT_APP_API_ENDPOINT + \"/gallerylist\");\n      fetch(url, requestOptions)\n        .then(response => response.json())\n        .then(data => {\n          console.log(data)\n\n          const newGalleryItems = data[\"Items\"]\n\n          this.setState({galleryItems: newGalleryItems, fetching_data: false})\n        }\n      )\n    }\n  }\n\n  componentDidMount(){\n    console.log(\"In GalleryListingData\")\n    this.getGalleryList()\n  }\n\n  render(){\n    return(\n      <GalleryListing data = {this.state.galleryItems} deleteFunction={this.deleteGallery}/>\n    )\n  }\n}\n\nclass GalleryListing extends React.Component{\n  constructor(props){\n    super(props)\n  }\n\n  render(){\n    var listItems = \"No Galleries.\"\n\n    if(this.props.data){\n      //Sort list by timestamp (descending)\n      var localData = [...this.props.data]\n      localData.sort(function(a,b) {\n        var keyA = new Date(a.timestamp),\n          keyB = new Date(b.timestamp);\n        return keyB-keyA;\n      })\n\n      listItems = localData.map((item) => (\n          <li key={item.SK}><GalleryItem item={item} deleteFunction={this.props.deleteFunction}/></li>\n      ));\n    }\n\n\n    return(\n      <div className=\"gallery-listing\">\n        <ul className=\"gallery-list\">\n          {listItems}\n        </ul>\n      </div>\n    )\n  }\n}\n\nclass GalleryItem extends React.Component{\n  constructor(props){\n    super(props)\n    this.copyLink = this.copyLink.bind(this);\n    this.getFilterDescription = this.getFilterDescription.bind(this);\n    const url = window.location.protocol + \"//\" + window.location.href.split(\"/\")[2] + \"/?gallery=\" + this.props.item.GSI1SK\n    this.state = {'name': this.props.item.SK, 'url': url}\n  }\n\n  copyLink(){\n    navigator.clipboard.writeText(this.state.url)\n  }\n\n  getFilterDescription(filters){\n    var output = \"\"\n    for (const [key, value] of Object.entries(JSON.parse(filters))) {\n      output = output + key + \"=\" + value + \", \";\n    }\n\n    output = output.slice(0, -2);\n\n    return(output);\n  }\n\n  render(){\n    const filterDescription = this.getFilterDescription(this.props.item.filters);\n\n    return (\n      <div className=\"gallery-item\">\n        <div className=\"gallery-item-chunk\">{this.state.name}</div>\n        <div className=\"gallery-item-chunk\">\n          <span><a href={this.state.url}>{this.state.url}</a></span>\n          <input className=\"icon-button link-copy-button\" type=\"image\" src=\"/link-icon.png\" onClick={this.copyLink}/> <br/>\n          <span className=\"small-text\"> {filterDescription} </span>\n        </div>\n        <div className=\"gallery-item-chunk\">\n          <input className=\"icon-button\" type=\"image\" src=\"/delete-icon.png\" value={this.state.name} onClick={this.props.deleteFunction}/> <br/>\n        </div>\n\n      </div>\n    )\n  }\n}\n\nclass Settings extends React.Component {\n  constructor(props){\n    super(props);\n  }\n\n  render() {\n    return (<h1>Settings!</h1>)\n  }\n}\n\nclass App extends React.Component {\n\n  sessionIsExpired = (token) => {\n    const sessionExpiration = token.payload.exp;\n    const currentTime = Math.floor(Date.now()/1000);\n    return (sessionExpiration < currentTime);\n  }\n\n  checkSession = (session) => {\n    AWS.config.region = process.env.REACT_APP_AWS_REGION;\n\n    const id_key = 'cognito-idp.' + process.env.REACT_APP_AWS_REGION + '.amazonaws.com/' + process.env.REACT_APP_COGNITO_USER_POOL_ID;\n\n    console.log(\"Getting credentials\")\n    console.log(id_key)\n    AWS.config.region = 'us-east-2';\n    AWS.config.credentials = new AWS.CognitoIdentityCredentials({\n      IdentityPoolId: process.env.REACT_APP_COGNITO_IDENTITY_POOL,\n      Logins: { // optional tokens, used for authenticated login\n          [id_key]: session.idToken.jwtToken,\n      }\n    });\n\n    // Make the call to obtain credentials\n    AWS.config.credentials.get(function(){\n\n        // Credentials will be available when this function is called.\n        var accessKeyId = AWS.config.credentials.accessKeyId;\n        var secretAccessKey = AWS.config.credentials.secretAccessKey;\n        var sessionToken = AWS.config.credentials.sessionToken;\n        console.log(AWS.config.credentials);\n\n    });\n\n    this.saveSession(session);\n  }\n\n  saveCredentials = (result) => {\n      console.log(result);\n  }\n\n  saveSession = (session) => {\n    console.log(\"Sign in success\");\n    console.log(session)\n    this.setState(session);\n  }\n\n  constructor(props){\n    super(props);\n    this.state = {view: \"Photos\"}\n\n    this.auth = new AmazonCognitoIdentity.CognitoAuth(authData);\n    this.auth.userhandler = {\n      onSuccess: this.checkSession,\n      onFailure: function(err) {\n        console.log(\"Error!\");\n        console.log(err)\n      }\n    };\n    this.auth.useCodeGrantFlow()\n    var curUrl = window.location.href;\n    this.auth.parseCognitoWebResponse(curUrl);\n  }\n\n  componentDidMount(){\n    if (this.auth.getCurrentUser()) {\n      console.log(this.auth);\n      if (this.sessionIsExpired(this.auth.signInUserSession.accessToken)){\n        console.debug(\"Panic!\")\n        //this.auth.signOut();\n      }\n      this.auth.getSession();\n    }\n  }\n\n  setViewFunction(view){\n    this.setState({'view': view})\n  }\n\n  viewChangeHandler=(view)=>{\n    this.setState({view})\n  }\n\n  buttonHandler=()=>{\n    if(this.state.accessToken){\n      this.auth.signOut()\n    } else {\n      this.auth.getSession()\n    }\n  }\n\n  render() {\n    const view = this.state.view;\n    console.log(this.state)\n\n    const urlParams = new URLSearchParams(window.location.search);\n    const gallery_id = urlParams.get('gallery');\n    const galleryMode = gallery_id ? true : false\n    const activeSession = (this.state.accessToken ? true : false) && !galleryMode\n\n    console.log(\"GalleryMode: \" + galleryMode.toString() + \", ActiveSession: \" + activeSession.toString())\n    var jwt = \"\"\n    if (this.state.accessToken){\n      jwt = this.state.accessToken.jwtToken\n    }\n\n    return (\n        <div>\n          <button type=\"button\" className=\"btn btn-secondary login\" onClick={this.buttonHandler}>{activeSession ? \"Logout\" : \"Login\"}</button>\n          {activeSession &&\n            <div>\n              <Header view={view} navHandler={this.viewChangeHandler} />\n              <Content view={view} jwt={jwt} navHandler={this.viewChangeHandler}/>\n            </div>\n          }\n          {galleryMode &&\n            <div>\n              <Content view=\"Gallery\"/>\n            </div>\n          }\n          <div id=\"modal-root\"></div>\n\n        </div>\n    )\n  }\n}\n\n//export default withAuthenticator(App);\nexport default App;\n",{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":3,"column":8,"nodeType":"50","messageId":"51","endLine":3,"endColumn":13},{"ruleId":"52","severity":1,"message":"53","line":29,"column":3,"nodeType":"54","messageId":"55","endLine":31,"endColumn":4},{"ruleId":"52","severity":1,"message":"53","line":69,"column":3,"nodeType":"54","messageId":"55","endLine":71,"endColumn":4},{"ruleId":"56","severity":1,"message":"57","line":103,"column":21,"nodeType":"58","messageId":"59","endLine":103,"endColumn":23},{"ruleId":"56","severity":1,"message":"57","line":103,"column":40,"nodeType":"58","messageId":"59","endLine":103,"endColumn":42},{"ruleId":"56","severity":1,"message":"57","line":105,"column":28,"nodeType":"58","messageId":"59","endLine":105,"endColumn":30},{"ruleId":"56","severity":1,"message":"57","line":105,"column":47,"nodeType":"58","messageId":"59","endLine":105,"endColumn":49},{"ruleId":"48","severity":1,"message":"60","line":125,"column":11,"nodeType":"50","messageId":"51","endLine":125,"endColumn":22},{"ruleId":"52","severity":1,"message":"53","line":168,"column":3,"nodeType":"54","messageId":"55","endLine":170,"endColumn":4},{"ruleId":"52","severity":1,"message":"53","line":198,"column":3,"nodeType":"54","messageId":"55","endLine":200,"endColumn":4},{"ruleId":"52","severity":1,"message":"53","line":222,"column":3,"nodeType":"54","messageId":"55","endLine":224,"endColumn":4},{"ruleId":"56","severity":1,"message":"57","line":263,"column":23,"nodeType":"58","messageId":"59","endLine":263,"endColumn":25},{"ruleId":"56","severity":1,"message":"61","line":264,"column":34,"nodeType":"58","messageId":"59","endLine":264,"endColumn":36},{"ruleId":"56","severity":1,"message":"57","line":282,"column":19,"nodeType":"58","messageId":"59","endLine":282,"endColumn":21},{"ruleId":"52","severity":1,"message":"53","line":465,"column":3,"nodeType":"54","messageId":"55","endLine":467,"endColumn":4},{"ruleId":"62","severity":1,"message":"63","line":472,"column":41,"nodeType":"64","messageId":"65","endLine":472,"endColumn":42,"suggestions":"66"},{"ruleId":"62","severity":1,"message":"63","line":478,"column":39,"nodeType":"64","messageId":"65","endLine":478,"endColumn":40,"suggestions":"67"},{"ruleId":"62","severity":1,"message":"63","line":484,"column":40,"nodeType":"64","messageId":"65","endLine":484,"endColumn":41,"suggestions":"68"},{"ruleId":"56","severity":1,"message":"61","line":549,"column":31,"nodeType":"58","messageId":"59","endLine":549,"endColumn":33},{"ruleId":"52","severity":1,"message":"53","line":595,"column":3,"nodeType":"54","messageId":"55","endLine":597,"endColumn":4},{"ruleId":"56","severity":1,"message":"57","line":678,"column":71,"nodeType":"58","messageId":"59","endLine":678,"endColumn":73},{"ruleId":"52","severity":1,"message":"53","line":926,"column":3,"nodeType":"54","messageId":"55","endLine":928,"endColumn":4},{"ruleId":"52","severity":1,"message":"53","line":1348,"column":3,"nodeType":"54","messageId":"55","endLine":1350,"endColumn":4},{"ruleId":"52","severity":1,"message":"53","line":1443,"column":3,"nodeType":"54","messageId":"55","endLine":1445,"endColumn":4},{"ruleId":"69","severity":1,"message":"70","line":1507,"column":11,"nodeType":"71","endLine":1507,"endColumn":118},{"ruleId":"69","severity":1,"message":"70","line":1511,"column":11,"nodeType":"71","endLine":1511,"endColumn":139},{"ruleId":"52","severity":1,"message":"53","line":1520,"column":3,"nodeType":"54","messageId":"55","endLine":1522,"endColumn":4},{"ruleId":"48","severity":1,"message":"72","line":1556,"column":13,"nodeType":"50","messageId":"51","endLine":1556,"endColumn":24},{"ruleId":"48","severity":1,"message":"73","line":1557,"column":13,"nodeType":"50","messageId":"51","endLine":1557,"endColumn":28},{"ruleId":"48","severity":1,"message":"74","line":1558,"column":13,"nodeType":"50","messageId":"51","endLine":1558,"endColumn":25},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"no-unused-vars","'Badge' is defined but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'galleryMode' is assigned a value but never used.","Expected '!==' and instead saw '!='.","no-useless-escape","Unnecessary escape character: \\,.","Literal","unnecessaryEscape",["77","78"],["79","80"],["81","82"],"jsx-a11y/alt-text","<input> elements with type=\"image\" must have a text alternative through the `alt`, `aria-label`, or `aria-labelledby` prop.","JSXOpeningElement","'accessKeyId' is assigned a value but never used.","'secretAccessKey' is assigned a value but never used.","'sessionToken' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"messageId":"83","fix":"84","desc":"85"},{"messageId":"86","fix":"87","desc":"88"},{"messageId":"83","fix":"89","desc":"85"},{"messageId":"86","fix":"90","desc":"88"},{"messageId":"83","fix":"91","desc":"85"},{"messageId":"86","fix":"92","desc":"88"},"removeEscape",{"range":"93","text":"94"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"95","text":"96"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"97","text":"94"},{"range":"98","text":"96"},{"range":"99","text":"94"},{"range":"100","text":"96"},[13195,13196],"",[13195,13195],"\\",[13439,13440],[13439,13439],[13681,13682],[13681,13681]]