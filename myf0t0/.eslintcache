[{"/home/michael/code/myf0t0/myf0t0/src/index.js":"1","/home/michael/code/myf0t0/myf0t0/src/App.js":"2"},{"size":155,"mtime":1615861736531,"results":"3","hashOfConfig":"4"},{"size":26004,"mtime":1624941100420,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"12rpndu",{"filePath":"9","messages":"10","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"/home/michael/code/myf0t0/myf0t0/src/index.js",[],["12","13"],"/home/michael/code/myf0t0/myf0t0/src/App.js",["14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29"],"import React from 'react';\nimport './index.css';\nimport Modal from 'react-bootstrap/Modal'\nimport Button from 'react-bootstrap/Button'\nimport Dropdown from 'react-bootstrap/Dropdown'\nimport DropdownButton from 'react-bootstrap/DropdownButton'\nimport ReactStars from 'react-stars'\n\nvar AWS = require('aws-sdk');\nconst { getSignedUrl } = require(\"@aws-sdk/s3-request-presigner\");\nconst { S3Client, GetObjectCommand } = require(\"@aws-sdk/client-s3\");\n\nvar AmazonCognitoIdentity = require('amazon-cognito-auth-js');\n\n\n\n// define the config for the Auth JS SDK\nvar authData = {\n  ClientId: process.env.REACT_APP_COGNITO_CLIENT_ID,\n  AppWebDomain: process.env.REACT_APP_COGNITO_APP_DOMAIN,\n  TokenScopesArray: process.env.REACT_APP_COGNITO_SCOPES.split(\",\"),\n  RedirectUriSignIn: process.env.REACT_APP_COGNITO_SIGN_IN_REDIRECT_URI,\n  RedirectUriSignOut: process.env.REACT_APP_COGNITO_SIGN_OUT_REDIRECT_URI,\n  UserPoolId: process.env.REACT_APP_COGNITO_USER_POOL_ID\n}\n\nclass Header extends React.Component {\n  constructor(props){\n    super(props);\n  }\n\n  handleNavClick=(view)=>{\n    this.props.navHandler(view);\n  }\n\n  render() {\n    return (<div className=\"header\">\n      <NavButton view=\"Photos\" navClickHandler={this.handleNavClick} />\n      <NavButton view=\"Galleries\" navClickHandler={this.handleNavClick} />\n      <NavButton view=\"Settings\" navClickHandler={this.handleNavClick} />\n    </div>);\n  }\n}\n\nclass NavButton extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.handleNav = this.handleNav.bind(this);\n  }\n\n  handleNav(e){\n    this.props.navClickHandler(this.props.view)\n  }\n\n  render() {\n    return (\n      <span onClick={this.handleNav}> {this.props.view} </span>\n    )\n  }\n}\n\nclass Content extends React.Component {\n  constructor(props){\n    super(props);\n  }\n\n  render(){\n    return (\n      <div className=\"content\">\n        {this.props.view === \"Photos\" && <PhotoFilterPane jwt={this.props.jwt}/>}\n        {this.props.view === \"Galleries\" && <Galleries />}\n        {this.props.view === \"Settings\" && <Settings />}\n      </div>\n  )\n  }\n}\n\nclass PhotoDetailModal extends React.Component{\n  constructor(props){\n    super(props);\n  }\n\n  render(){\n    return (\n      <Modal\n      {...this.props}\n      //size=\"lg\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      dialogClassName=\"photo-modal\"\n      centered\n    >\n      <Modal.Body>\n        <PhotoDetailSigner data={this.props.photo} />\n        <PhotoDetailData data={this.props.photo} jwt={this.props.jwt} updateHandler={this.props.updateHandler}/>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button className=\"btn btn-secondary\" onClick={this.props.onHide}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n  }\n}\n\nclass PhotoDetailData extends React.Component{\n  constructor(props){\n    super(props);\n  }\n\n  render() {\n    const exif = this.props.data.exif;\n\n    var photoName = \"\"\n    if (\"SK\" in this.props.data){\n      //var firstIndex = this.props.data.SK.indexOf('_');\n      const sk = this.props.data.SK\n      photoName = sk.substr(sk.indexOf('_')+1)\n      //photoName = this.props.data.SK.split(\"_\")[1];\n    }\n    console.debug(this.props.data);\n    return(\n      <div className=\"photo-data\">\n        { photoName && <h1> {photoName}</h1>}\n        <PhotoRating data={this.props.data} jwt={this.props.jwt} updateHandler={this.props.updateHandler}/>\n        { exif &&\n          <PhotoExifData exif={exif} />\n        }\n      </div>\n    )\n  }\n\n}\n\nclass PhotoRating extends React.Component{\n  constructor(props){\n    super(props);\n    this.setRating = this.setRating.bind(this);\n  }\n\n  handleRatingClick = (rating) => {\n      console.log(rating);\n      console.log(this.props);\n      this.setRating(rating);\n  }\n\n  async setRating(rating) {\n    console.debug(this.props);\n    if (this.props.jwt){\n      const requestOptions = {\n        mode: 'cors',\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: this.props.jwt\n        }\n      };\n      console.debug(this.props);\n      var url = new URL(process.env.REACT_APP_API_ENDPOINT + \"/rating\");\n      const params = {\"photo_id\": this.props.data.SK, \"rating\": rating}\n      url.search = new URLSearchParams(params).toString();\n      fetch(url, requestOptions)\n        .then(response => response.json())\n        .then(data => {\n          console.log(data)\n          this.props.updateHandler(this.props.data.SK, \"GSI1PK\", rating)\n        })\n    }\n  }\n\n  render() {\n    const current_rating = parseInt(this.props.data.GSI1PK);\n    return(\n      <ReactStars name=\"star-rating\" count={5} onChange={this.handleRatingClick} size={30} half={false} value={current_rating}/>\n    )\n  }\n}\n\nclass PhotoExifData extends React.Component{\n  constructor(props){\n    super(props);\n  }\n\n  formatExif(exif){\n    var formatted_exif = {}\n    if(\"ApertureValue\" in exif){\n      const regexpAperture = /\\(([0-9]+)\\, ([0-9]+)\\)/;\n      const match = exif[\"ApertureValue\"].match(regexpAperture);\n      formatted_exif[\"Aperture\"] = (parseFloat(match[1])/parseFloat(match[2])).toFixed(2);\n    }\n\n    if(\"FNumber\" in exif){\n      const regexpFNumber= /\\(([0-9]+)\\, ([0-9]+)\\)/;\n      const match = exif[\"FNumber\"].match(regexpFNumber);\n      formatted_exif[\"FNumber\"] = (parseFloat(match[1])/parseFloat(match[2])).toFixed(2);\n    }\n\n    if(\"ExposureTime\" in exif){\n      const regexpExposure= /\\(([0-9]+)\\, ([0-9]+)\\)/;\n      const match = exif[\"ExposureTime\"].match(regexpExposure);\n      //Get exposure time in ms\n      const exposureTime = (parseFloat(match[1])/(parseFloat(match[2])*1000.0)).toFixed(0);\n      formatted_exif[\"Exposure Time\"] = `${exposureTime}ms`\n    }\n\n    if(\"ExifImageHeight\" in exif){\n      const height = exif[\"ExifImageHeight\"];\n      formatted_exif[\"Image Height\"] = `${height}px`\n    }\n\n    if(\"ExifImageWidth\" in exif){\n      const width = exif[\"ExifImageWidth\"];\n      formatted_exif[\"Image Width\"] = `${width}px`\n    }\n\n    if(\"DateTime\" in exif){\n      formatted_exif[\"Date Taken\"] = exif[\"DateTime\"]\n    }\n\n    if(\"Make\" in exif){\n      formatted_exif[\"Make\"] = exif[\"Make\"]\n    }\n\n    if(\"Model\" in exif){\n      formatted_exif[\"Model\"] = exif[\"Model\"]\n    }\n\n    return formatted_exif;\n\n  }\n\n  render(){\n    const exif = this.formatExif(this.props.exif);\n    if(exif){\n      return(\n        <div>\n        {\n          Object.keys(exif).map((key, i) => (\n\n            <p key={i}>\n              <span>{key}: {exif[key]}</span>\n            </p>\n          ))\n        }\n        </div>\n      )\n    }\n    return(<div />);\n  }\n\n}\n\nclass PhotoDetailSigner extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount () {\n    //Extract the bucket and object key from the response\n    const image_key_arr = this.props.data.GSI1SK.split(\"/\", 1);\n    const image_bucket = image_key_arr[0];\n    const image_key = this.props.data.GSI1SK.slice(image_bucket.length + 1)\n\n    /*\n    Sign a URL for the thumbnail using the Role associated with our login so that we can\n    access the private bucket.\n    */\n    const clientParams = {\n      region: process.env.REACT_APP_AWS_REGION,\n      credentials: AWS.config.credentials\n    }\n    const getObjectParams = {\n      Bucket:image_bucket,\n      Key: image_key\n    }\n    const client = new S3Client(clientParams);\n    const command = new GetObjectCommand(getObjectParams);\n    getSignedUrl(client, command, { expiresIn: 3600 })\n    .then((url) => {\n      this.setState({url: url});\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n  }\n\n  render(){\n    const url = this.state.url;\n    if (url){\n      return(<PhotoDetailImage url={url} />);\n    } else {\n      return null;\n    }\n\n  }\n}\n\nclass PhotoDetailImage extends React.Component{\n  constructor (props) {\n    super(props);\n  }\n\n  render() {\n    return (\n        <img className=\"detail-photo\" src={this.props.url} alt=\"\"/>\n    );\n  }\n}\n\nclass PhotoFlowData extends React.Component{\n  constructor(props){\n    super(props);\n    console.debug(\"PhotoFlowData Constructor\")\n    this.getPhotoData = this.getPhotoData.bind(this)\n    this.updatePhotoData = this.updatePhotoData.bind(this);\n    this.state = {photos: [], fetching_data: false}\n  }\n\n  componentDidMount(){\n    this.getPhotoData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.filters !== prevProps.filters || this.state.photos == []) {\n      this.getPhotoData(true);\n    }\n  }\n\n  getPhotoData(reset){\n    var params = {}\n\n    if(this.state.fetching_data){\n      console.log(\"Already fetching data, skiping data refresh.\")\n      return;\n    }\n\n    if(typeof this.props.filters === 'undefined'){\n      console.debug(\"Filters undefined in refreshData()\")\n      return;\n    }\n\n    for (const [key, value] of Object.entries(this.props.filters)){\n      if (value){\n        params[key] = value;\n      }\n    }\n\n    if(this.state.last_photo_key && !reset){\n      params[\"LastPhotoKey\"] = this.state.last_photo_key;\n    }\n\n    params[\"max_results\"] = 50;\n\n    this.setState({fetching_data: true});\n    /*\n    Make sure the async process to fetch access tokens has completed before continuing.\n    */\n    if (this.props.jwt){\n      const requestOptions = {\n        mode: 'cors',\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: this.props.jwt\n        }\n      };\n      var url = new URL(process.env.REACT_APP_API_ENDPOINT + \"/photo\");\n      url.search = new URLSearchParams(params).toString();\n      fetch(url, requestOptions)\n        .then(response => response.json())\n        .then(data => {\n          console.log(data)\n\n          var newPhotos;\n          if(reset){\n            newPhotos = data[\"Items\"]\n          } else {\n            newPhotos = this.state.photos.concat(data[\"Items\"])\n          }\n\n          this.setState({photos: newPhotos, fetching_data: false})\n\n          /*\n          Check to see if we got a \"LastEvaluatedKey\".  If so, there\n          are more pages of thumbnails that match our filters.\n          */\n          var lpk = \"\";\n          if (\"LastPhotoKey\" in data){\n            lpk = data[\"LastPhotoKey\"];\n          }\n          console.debug(\"LPK: \" + lpk)\n          this.setState({last_photo_key: lpk})\n\n          /*\n          Check to see if there are more photos to get AND we have space left\n          on the visible page.  If so, keep getting thumbnails.\n          */\n          // if(lek && document.body.clientHeight < window.innerHeight){\n          //   console.debug(\"MOAR DATA\")\n          //   this.getPhotoData()\n          // }\n        })\n        .catch(error => {\n          console.log(error);\n       });\n    } else {\n      console.log(\"No JWT Token yet.\");\n    }\n  }\n\n  updatePhotoData(photo_id, key, value){\n    let photos = [...this.state.photos]\n    var i;\n    for (i=0; i<photos.length; i++){\n      if (photos[i][\"SK\"] === photo_id){\n        //Check if a filter has changed such that this photo would be excluded.\n        //This should only happen if the rating filter is set to \"unrated\"\n        if(this.props.filters.rating === \"unrated\" && key === \"GSI1PK\"){\n          photos.splice(i, 1)\n        } else {\n          //If it wasn't a filter update, update the metadata value.\n          let photo = {...photos[i]}\n          photo[key] = value;\n          photos[i] = photo;\n        }\n\n        //No matter what changed, update the photos.\n        this.setState({photos: photos})\n        break;\n      }\n    }\n  }\n\n  render(){\n    console.debug(\"Rendering PhotoFlowData\")\n    var results_truncated = false;\n    if(this.state.last_photo_key){\n      results_truncated = true;\n    }\n\n    return (\n        <PhotoFlow photos={this.state.photos} results_truncated={results_truncated} get_photos={this.getPhotoData} update_metadata={this.updatePhotoData} jwt={this.props.jwt}/>\n    )\n  }\n}\n\nclass PhotoFlow extends React.Component {\n  constructor(props){\n    super(props);\n    console.debug(\"PhotoFlow Constructor!\")\n    this.handlePhotoFocus = this.handlePhotoFocus.bind(this)\n    this.handleMetadataUpdate = this.handleMetadataUpdate.bind(this)\n    this.closePhotoFocus = this.closePhotoFocus.bind(this)\n\n    this.state = {\n      focusPhoto:{},\n      focusModalVisible:false,\n      fetching_data: false\n    }\n  }\n\n  handleMetadataUpdate(photo_id, key, value){\n    this.props.update_metadata(photo_id, key, value);\n\n    if (this.state.focusPhoto.SK === photo_id){\n      var photo = this.state.focusPhoto;\n      photo[key] = value;\n      this.setState({\"focusPhoto\": photo})\n    }\n  }\n\n  handlePhotoFocus(photo){\n    this.setState({focusPhoto: photo, focusModalVisible: true});\n  }\n\n  closePhotoFocus(){\n    this.setState({focusModalVisible: false});\n  }\n\n  componentDidMount(){\n    document.addEventListener('scroll', this.trackScrolling);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('scroll', this.trackScrolling);\n  }\n\n  isBottom(el) {\n    return el.getBoundingClientRect().bottom <= window.innerHeight;\n  }\n\n  trackScrolling = () => {\n    const wrappedElement = document.getElementById('photoFlowDiv');\n    if (this.isBottom(wrappedElement)) {\n      console.log('photoFlow bottom reached');\n      if(this.props.results_truncated){\n        this.props.get_photos();\n      }\n    }\n  };\n\n  render() {\n    //Assume a sorted list of photos has come back from the API.\n    var photo_groups = []\n    var curr_header = \"\"\n    var groups = 0\n    //console.log(this.state.photos);\n    var listItems = \"No Photos To Display.\"\n    if(this.props.photos){\n      for(var i=0; i<this.props.photos.length; i++){\n        var photo = this.props.photos[i];\n        //console.log(photo);\n        if (curr_header !== photo.SK.split(\"T\")[0]){\n          curr_header = photo.SK.split(\"T\")[0]\n          photo_groups.push({header: curr_header, photos: []});\n          groups++;\n        }\n        photo_groups[groups-1]['photos'].push(photo);\n      };\n\n      listItems = photo_groups.map((photo_data) => (\n          <li key={photo_data.header}><PhotoGroup header={photo_data.header} data={photo_data.photos} photoFocusHandler={this.handlePhotoFocus}/></li>\n      ));\n    }\n\n    return (\n       <div id='photoFlowDiv'>\n       <br/>\n       <span className=\"section-title\">Photos!</span>\n       <ul>\n          {listItems}\n        </ul>\n\n          <PhotoDetailModal\n            show={this.state.focusModalVisible}\n            onHide={this.closePhotoFocus}\n            photo={this.state.focusPhoto}\n            jwt={this.props.jwt}\n            updateHandler={this.handleMetadataUpdate}\n          />\n\n      </div>\n    )\n  }\n}\n\nclass PhotoGroup extends React.Component{\n  constructor(props){\n    super(props);\n  }\n  render(){\n    const listItems = this.props.data.map((photo) =>\n      <li key={photo.SK}><Thumbnail data={photo} onClickHandler={this.props.photoFocusHandler}/> </li>\n    );\n    return(\n      <div>\n        <span>{this.props.header}</span>\n        <ul className=\"ul_thumbnail\">\n          {listItems}\n        </ul>\n      </div>\n    )\n  }\n}\n\nclass Thumbnail extends React.Component{\n  constructor(props){\n    super(props);\n    this.clickHandler = this.clickHandler.bind(this)\n    this.state = {clickHandler: this.clickHandler};\n  }\n\n  clickHandler(){\n    this.props.onClickHandler(this.props.data)\n  }\n\n  componentDidMount () {\n    //Extract the bucket and object key from the response\n    const thumbnail_arr = this.props.data.thumbnail_key.split(\"/\", 1);\n    const thumbnail_bucket = thumbnail_arr[0];\n    const thumbnail_key = this.props.data.thumbnail_key.slice(thumbnail_bucket.length + 1)\n\n    /*\n    Sign a URL for the thumbnail using the Role associated with our login so that we can\n    access the private bucket.\n    */\n    const clientParams = {\n      region: process.env.REACT_APP_AWS_REGION,\n      credentials: AWS.config.credentials\n    }\n    const getObjectParams = {\n      Bucket: thumbnail_bucket,\n      Key: thumbnail_key\n    }\n    const client = new S3Client(clientParams);\n    const command = new GetObjectCommand(getObjectParams);\n    getSignedUrl(client, command, { expiresIn: 3600 })\n    .then((url) => {\n      this.setState({url: url});\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n  }\n\n  render(){\n    const url = this.state.url;\n    const clickHandler = this.state.clickHandler;\n    if (url){\n      return(<ThumbnailImage url={url} clickHandler={clickHandler} />);\n    } else {\n      return null;\n    }\n\n  }\n}\n\nclass ThumbnailImage extends React.Component{\n  constructor (props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n        <img className=\"thumbnail\" src={this.props.url} alt=\"\" onClick={this.props.clickHandler}/>\n    );\n  }\n}\n\nclass PhotoFilterPane extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.togglePane = this.togglePane.bind(this)\n    this.handleValueChanged = this.handleValueChanged.bind(this)\n    this.submitFilters = this.submitFilters.bind(this)\n    this.cancelFilters = this.cancelFilters.bind(this)\n    this.loadFilterValuesFromStorage = this.loadFilterValuesFromStorage.bind(this);\n    this.saveFilterValuesToStorage = this.saveFilterValuesToStorage.bind(this);\n\n    this.state = {\n      \"pane_open\": false,\n    }\n  }\n\n  componentDidMount(){\n    this.loadFilterValuesFromStorage();\n  }\n\n  loadFilterValuesFromStorage(){\n    var start_date = localStorage.getItem('start_date_filter')\n    if (typeof start_date === 'undefined'){\n      start_date = \"\"\n    }\n\n    var end_date = localStorage.getItem('end_date_filter')\n    if (typeof end_date === 'undefined'){\n      end_date = \"\"\n    }\n\n    var rating = localStorage.getItem('rating_filter')\n    if (typeof rating === 'undefined'){\n      rating = \"all\"\n    }\n\n    console.debug(\"start_date: \" + start_date)\n    console.debug(\"end_date: \" + end_date)\n    console.debug(\"rating: \" + rating)\n\n    this.setState(\n      {\n        \"current_filter_values\": {\n          \"start_date\": start_date,\n          \"end_date\": end_date,\n          \"rating\": rating\n        },\n        \"filter_values\": {\n          \"start_date\": start_date,\n          \"end_date\": end_date,\n          \"rating\": rating\n        }\n      }\n    );\n  }\n\n  saveFilterValuesToStorage(){\n    if(this.state.current_filter_values.start_date){\n      localStorage.setItem('start_date_filter', this.state.current_filter_values.start_date)\n    }\n    if(this.state.current_filter_values.end_date){\n      localStorage.setItem('end_date_filter', this.state.current_filter_values.end_date)\n    }\n    if(this.state.current_filter_values.rating){\n      localStorage.setItem('rating_filter', this.state.current_filter_values.rating)\n    }\n  }\n\n  togglePane(){\n    this.setState({\n      \"pane_open\": !this.state.pane_open\n    })\n  }\n\n  handleValueChanged(field, value){\n    console.debug(\"In handleValueChanged\")\n    console.debug(\"field: \" + field)\n    console.debug(\"value: \" + value)\n    var filter_vals = Object.assign({}, this.state.current_filter_values);\n    filter_vals[field] = value\n\n    console.debug(filter_vals)\n\n    this.setState({current_filter_values: filter_vals})\n  }\n\n  submitFilters(){\n    console.debug(this.state.current_filter_values)\n    this.saveFilterValuesToStorage()\n    this.togglePane()\n    var filter_vals = Object.assign({}, this.state.current_filter_values);\n    this.setState({\"filter_values\": filter_vals});\n  }\n\n  cancelFilters(){\n    console.debug(\"Cancel Filters\")\n    this.loadFilterValuesFromStorage();\n    this.togglePane();\n  }\n\n  render(){\n    console.debug(\"Rendering FilterPane\")\n    console.debug(this.state.filter_values)\n    const filter_values = this.state.filter_values;\n    const isPaneOpen = this.state.pane_open;\n    return (\n      <div className=\"filter-pane\">\n        <button  type=\"button\" className=\"btn btn-secondary\" onClick={this.togglePane}> {isPaneOpen ? 'Hide Filters' : 'Show Filters'} </button>\n\n        {isPaneOpen &&\n          <div className=\"filter-table\">\n            <table><tbody>\n              <tr>\n                <td> Start Date</td>\n                <td> End Date</td>\n                <td> Rating </td>\n              </tr>\n              <tr>\n                <td> <DateFilterControl field=\"start_date\" value={this.state.current_filter_values.start_date} onValueChange={this.handleValueChanged}/> </td>\n                <td> <DateFilterControl field=\"end_date\" value={this.state.current_filter_values.end_date} onValueChange={this.handleValueChanged}/> </td>\n                <td> <RatingFilterControl field=\"rating\" value={this.state.current_filter_values.rating} onValueChange={this.handleValueChanged}/> </td>\n              </tr>\n              <tr>\n                <td> <button type=\"button\" className=\"btn btn-secondary\" onClick={this.submitFilters}>Submit</button> </td>\n                <td> <button type=\"button\" className=\"btn btn-secondary\" onClick={this.cancelFilters}>Cancel</button></td>\n              </tr>\n            </tbody></table>\n          </div>\n        }\n        <PhotoFlowData jwt={this.props.jwt} filters={filter_values}/>\n      </div>\n    )\n  }\n}\n\nclass DateFilterControl extends React.Component{\n  constructor(props){\n    super(props);\n    this.handleChange = this.handleChange.bind(this)\n    this.state = {'value': this.props.value}\n  }\n\n  handleChange(e){\n    this.setState({'value': e.target.value});\n    console.debug(Date.parse(e.target.value))\n    if(Date.parse(e.target.value)){\n      console.debug(\"It worked!\");\n      this.props.onValueChange(this.props.field, e.target.value);\n    }\n  }\n\n  render(){\n    console.debug(\"debug\");\n    return(\n    <input value={this.state.value} onChange={this.handleChange} />\n  )\n  }\n}\n\nclass RatingFilterControl extends React.Component{\n  constructor(props){\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {'value': this.props.value}\n  }\n\n  handleChange(e){\n    console.debug(e)\n    this.setState({'value': e});\n    this.props.onValueChange(this.props.field, e);\n  }\n\n  render(){\n    const keyval = {\n      \"all\": \"All Ratings\",\n      \"1\": \"1+\",\n      \"2\": \"2+\",\n      \"3\": \"3+\",\n      \"4\": \"4+\",\n      \"5\": \"5\",\n      \"unrated\": \"Unrated\"\n    }\n\n    const title = keyval[this.state.value]\n    return (\n      <DropdownButton id=\"rating_filter\" title={title} onSelect={this.handleChange}>\n        <Dropdown.Item eventKey=\"all\">All Ratings</Dropdown.Item>\n        <Dropdown.Item eventKey=\"1\">1+</Dropdown.Item>\n        <Dropdown.Item eventKey=\"2\">2+</Dropdown.Item>\n        <Dropdown.Item eventKey=\"3\">3+</Dropdown.Item>\n        <Dropdown.Item eventKey=\"4\">4+</Dropdown.Item>\n        <Dropdown.Item eventKey=\"5\">5</Dropdown.Item>\n        <Dropdown.Divider />\n        <Dropdown.Item eventKey=\"unrated\">Unrated</Dropdown.Item>\n      </DropdownButton>\n    )\n  }\n}\n\nclass Galleries extends React.Component {\n  constructor(props){\n    super(props);\n  }\n\n  render() {\n    return <h1>Galleries!</h1>\n  }\n}\n\nclass Settings extends React.Component {\n  constructor(props){\n    super(props);\n  }\n\n  render() {\n    return (<h1>Settings!</h1>)\n  }\n}\n\nclass App extends React.Component {\n\n  sessionIsExpired = (token) => {\n    const sessionExpiration = token.payload.exp;\n    const currentTime = Math.floor(Date.now()/1000);\n    return (sessionExpiration < currentTime);\n  }\n\n  checkSession = (session) => {\n    AWS.config.region = process.env.REACT_APP_AWS_REGION;\n\n    const id_key = 'cognito-idp.' + process.env.REACT_APP_AWS_REGION + '.amazonaws.com/' + process.env.REACT_APP_COGNITO_USER_POOL_ID;\n\n    console.log(\"Getting credentials\")\n    console.log(id_key)\n    AWS.config.region = 'us-east-2';\n    AWS.config.credentials = new AWS.CognitoIdentityCredentials({\n      IdentityPoolId: process.env.REACT_APP_COGNITO_IDENTITY_POOL,\n      Logins: { // optional tokens, used for authenticated login\n          [id_key]: session.idToken.jwtToken,\n      }\n    });\n\n    // Make the call to obtain credentials\n    AWS.config.credentials.get(function(){\n\n        // Credentials will be available when this function is called.\n        var accessKeyId = AWS.config.credentials.accessKeyId;\n        var secretAccessKey = AWS.config.credentials.secretAccessKey;\n        var sessionToken = AWS.config.credentials.sessionToken;\n        console.log(AWS.config.credentials);\n\n    });\n\n    this.saveSession(session);\n  }\n\n  saveCredentials = (result) => {\n      console.log(result);\n  }\n\n  saveSession = (session) => {\n    console.log(\"Sign in success\");\n    console.log(session)\n    this.setState(session);\n  }\n\n  constructor(props){\n    super(props);\n    this.state = {view: \"Photos\"}\n\n    this.auth = new AmazonCognitoIdentity.CognitoAuth(authData);\n    this.auth.userhandler = {\n      onSuccess: this.checkSession,\n      onFailure: function(err) {\n        console.log(\"Error!\");\n        console.log(err)\n      }\n    };\n    this.auth.useCodeGrantFlow()\n    var curUrl = window.location.href;\n    this.auth.parseCognitoWebResponse(curUrl);\n  }\n\n  componentDidMount(){\n    if (this.auth.getCurrentUser()) {\n      console.log(this.auth);\n      if (this.sessionIsExpired(this.auth.signInUserSession.accessToken)){\n        console.debug(\"Panic!\")\n        this.auth.signOut();\n      }\n      this.auth.getSession();\n    }\n  }\n\n  viewChangeHandler=(view)=>{\n    this.setState({view})\n  }\n\n  buttonHandler=()=>{\n    if(this.state.accessToken){\n      this.auth.signOut()\n    } else {\n      this.auth.getSession()\n    }\n  }\n\n  render() {\n    const view = this.state.view;\n    console.log(this.state)\n    const activeSession = this.state.accessToken ? true : false\n    var jwt = \"\"\n    if (this.state.accessToken){\n      jwt = this.state.accessToken.jwtToken\n    }\n\n    return (\n        <div>\n          <button type=\"button\" className=\"btn btn-secondary login\" onClick={this.buttonHandler}>{activeSession ? \"Logout\" : \"Login\"}</button>\n          {activeSession &&\n          <div>\n            <Header navHandler={this.viewChangeHandler} />\n            <Content view={view} jwt={jwt} />\n          </div>\n          }\n          <div id=\"modal-root\"></div>\n\n        </div>\n    )\n  }\n}\n\n//export default withAuthenticator(App);\nexport default App;\n",{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":28,"column":3,"nodeType":"36","messageId":"37","endLine":30,"endColumn":4},{"ruleId":"34","severity":1,"message":"35","line":64,"column":3,"nodeType":"36","messageId":"37","endLine":66,"endColumn":4},{"ruleId":"34","severity":1,"message":"35","line":80,"column":3,"nodeType":"36","messageId":"37","endLine":82,"endColumn":4},{"ruleId":"34","severity":1,"message":"35","line":106,"column":3,"nodeType":"36","messageId":"37","endLine":108,"endColumn":4},{"ruleId":"34","severity":1,"message":"35","line":179,"column":3,"nodeType":"36","messageId":"37","endLine":181,"endColumn":4},{"ruleId":"38","severity":1,"message":"39","line":186,"column":41,"nodeType":"40","messageId":"41","endLine":186,"endColumn":42,"suggestions":"42"},{"ruleId":"38","severity":1,"message":"39","line":192,"column":39,"nodeType":"40","messageId":"41","endLine":192,"endColumn":40,"suggestions":"43"},{"ruleId":"38","severity":1,"message":"39","line":198,"column":40,"nodeType":"40","messageId":"41","endLine":198,"endColumn":41,"suggestions":"44"},{"ruleId":"34","severity":1,"message":"35","line":299,"column":3,"nodeType":"36","messageId":"37","endLine":301,"endColumn":4},{"ruleId":"45","severity":1,"message":"46","line":324,"column":71,"nodeType":"47","messageId":"48","endLine":324,"endColumn":73},{"ruleId":"34","severity":1,"message":"35","line":548,"column":3,"nodeType":"36","messageId":"37","endLine":550,"endColumn":4},{"ruleId":"34","severity":1,"message":"35","line":831,"column":3,"nodeType":"36","messageId":"37","endLine":833,"endColumn":4},{"ruleId":"34","severity":1,"message":"35","line":841,"column":3,"nodeType":"36","messageId":"37","endLine":843,"endColumn":4},{"ruleId":"49","severity":1,"message":"50","line":877,"column":13,"nodeType":"51","messageId":"52","endLine":877,"endColumn":24},{"ruleId":"49","severity":1,"message":"53","line":878,"column":13,"nodeType":"51","messageId":"52","endLine":878,"endColumn":28},{"ruleId":"49","severity":1,"message":"54","line":879,"column":13,"nodeType":"51","messageId":"52","endLine":879,"endColumn":25},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-useless-escape","Unnecessary escape character: \\,.","Literal","unnecessaryEscape",["57","58"],["59","60"],["61","62"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'accessKeyId' is assigned a value but never used.","Identifier","unusedVar","'secretAccessKey' is assigned a value but never used.","'sessionToken' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"messageId":"63","fix":"64","desc":"65"},{"messageId":"66","fix":"67","desc":"68"},{"messageId":"63","fix":"69","desc":"65"},{"messageId":"66","fix":"70","desc":"68"},{"messageId":"63","fix":"71","desc":"65"},{"messageId":"66","fix":"72","desc":"68"},"removeEscape",{"range":"73","text":"74"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"75","text":"76"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"77","text":"74"},{"range":"78","text":"76"},{"range":"79","text":"74"},{"range":"80","text":"76"},[4901,4902],"",[4901,4901],"\\",[5145,5146],[5145,5145],[5387,5388],[5387,5387]]